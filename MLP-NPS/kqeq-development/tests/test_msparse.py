import unittest
import sys
sys.path.append("..")
from ase.io import read
import numpy as np
from kqeq.kqeq import kernel_qeq
from kqeq.funct import get_dipoles
from kqeq.kernel import kernel
import matplotlib.pyplot as plt
import random
#from HTMLTestRunner import HTMLTestRunner

random.seed(10)
mols = read("testcase.xyz@:",format='extxyz')
mols_train = mols[:18]
mols_test = mols[18:]

dipoles_prediction =  {
    0:[ 0.30086706,  0.12549162, -0.22000261,  0.07688102,  0.39931361, -0.58358091],
    1: [ 0.57939082,  0.08285171, -0.46613484,  0.03716252,  0.32084772, -0.26875326],
    2:[ 0.47897556,  0.05254788, -0.50445735,  0.06445221,  0.63714019, -0.44563536]
}
charges_prediction =  {
    0:[-0.41119033,  0.01794159, -0.24457102,  0.0343584,  -0.30203528,  0.38841284,
               -0.50387321,  0.13597389,  0.13767683,  0.13438262,  0.11401609,  0.11446312,
               0.10322965,  0.28121479, -0.33731688, -0.08023072, -0.19909117,  0.10166339,
               -0.20305527,  0.34025983, -0.23543396,  0.16020849,  0.1602145,   0.15773393,
               0.13504787],
    1:[-0.97855369,  0.17072845, -0.27210271, -0.25461473, -0.41862784,  0.83379135,
              -1.04590721,  0.29565517,  0.29156378,  0.29461641,  0.11083248,  0.22696106,
              0.22120544,  0.52445202, -1.41972368, -0.0747523,  -0.41384588,  0.17470699,
              -0.29478804,  0.82107769, -0.42639368,  0.48595665,  0.48595886,  0.47218295,
              0.18962043],
    2:[-0.40030866,  0.08566833, -0.25655681,  0.06838772, -0.30365724,  0.34509613,
               -0.68252768,  0.14124703,  0.12905225,  0.13584721,  0.11522154,  0.11217782,
               0.11492144,  0.39543093, -0.33282991, -0.12358909, -0.28220942,  0.06959311,
               -0.15732176,  0.37087998, -0.26975178,  0.18862977,  0.18863736,  0.18997249,
               0.15798925],
}
eneg_prediction = {
    0:[ 0.02601026,  0.00299876,  0.07186978, -0.00604099,  0.05961255, -0.01649799,
                0.05231292, -0.06593625, -0.06585673, -0.06413226, -0.09372322, -0.10106338,
                -0.09595859, -0.15073834,  0.01800397,  0.05410863,  0.07413462,  0.00304181,
                0.0506963,  -0.00016507,  0.06479371, -0.08435292, -0.08435501, -0.08345279,
                -0.11620893],
   1:[ 0.04343441, -0.05616893,  0.05375901, -0.00368312,  0.03864537, -0.10399133,
               0.08099733, -0.15690931, -0.14855441, -0.14951981, -0.15047253, -0.18148423,
               -0.18493076, -0.2975019,   0.15300933,  0.12074389,  0.15290828, -0.0010566,
               0.02023082, -0.08375009,  0.0587717,  -0.17644536, -0.1764463,  -0.17803451,
               -0.170136  ],
    2:[-0.00633557, -0.03295197,  0.03735434, -0.04448358,  0.03923747, -0.01128186,
               0.07485705, -0.09957263, -0.09003398, -0.0897925,  -0.12711912, -0.13438575,
               -0.14142638, -0.22304479,  0.02392281,  0.09618891,  0.13655415,  0.04225718,
               0.06351375,  0.02278692,  0.0939352,  -0.09340208, -0.09340198, -0.09765906,
               -0.10124617]
}

charges_calc = {
    0:[-0.41119033,  0.01794159, -0.24457102,  0.0343584 , -0.30203528,
               0.38841284, -0.50387321,  0.13597389,  0.13767683,  0.13438262,
               0.11401609,  0.11446312,  0.10322965,  0.28121479],
    1: [-0.97855369,  0.17072845, -0.27210271, -0.25461473, -0.41862784,
               0.83379135, -1.04590721,  0.29565517,  0.29156378,  0.29461641,
               0.11083248,  0.22696106,  0.22120544,  0.52445202],
    2:[-0.40030866,  0.08566833, -0.25655681,  0.06838772, -0.30365724,
               0.34509613, -0.68252768,  0.14124703,  0.12905225,  0.13584721,
               0.11522154,  0.11217782,  0.11492144,  0.39543093],
}
energy_calc = {
    0: -2.4544509142493127,
    1:-8.734023858554194,
    2:-3.4268339394329086
}
dipole_calc = {
    0:[ 0.30086706,  0.12549162, -0.22000261],
    1: [ 0.57939082,  0.08285171, -0.46613484],
    2:[ 0.47897556,  0.05254788, -0.50445735]
}
forces_calc ={
    0:[[-0.02131019,  0.34864772,  0.05320567],
               [ 0.05545945,  0.25355167,  0.53672533],
               [-0.34560218, -0.17274751, -0.72892878],
               [ 0.32363444, -0.01681063, -0.35565418],
               [ 0.68996484, -0.56992987,  0.42480935],
               [-0.47540036,  0.47691449,  0.22480314],
               [ 0.39083298, -0.35066536,  0.04421912],
               [-0.02864562, -0.08674398, -0.01819927],
               [ 0.03590993, -0.05851681, -0.0446509 ],
               [ 0.01602949,  0.02885163,  0.02916105],
               [-0.10102102, -0.14965853, -0.10555403],
               [-0.17931873, -0.12242195,  0.10491855],
               [-0.03287849,  0.16725684,  0.1119465 ],
               [-0.32765454,  0.25227228, -0.27680155]],
    1:[[ 1.05379202,  8.93535479, -1.45561019],
              [-0.75823481, -1.88882878, -1.36256661],
              [-0.89813188,  0.05842221, -0.65766777],
              [ 2.11082187, -1.09609133, -2.16656263],
              [ 0.2351267,  -0.08158819,  1.6712437 ],
              [ 1.26201928, -0.82768215,  3.80924531],
              [-0.23270185, -0.27190908,  0.45281734],
              [-3.27521583, -1.4880209,   0.35101013],
              [ 1.38144232, -1.75971999,  2.64143774],
              [ 0.94664092, -2.18403451, -2.40931217],
              [-0.53634085,  0.11036491, -0.4294026 ],
              [-0.30555625,  1.14128616,  0.62801978],
              [-1.19694333, -0.41582119,  0.57762658],
              [ 0.2132817,  -0.23173208, -1.65027862]],
    2:[[ 1.21533756e-01,  8.27706370e-01, -1.93077408e-01],
               [ 1.41218139e-01,  8.00390661e-01,  2.86194855e-01],
               [-8.70793228e-01, -9.75752808e-02, -1.56173846e+00],
               [ 3.89151246e-01, -8.87054419e-02, -4.89746553e-01],
               [ 1.65280098e+00, -1.23406807e+00,  1.43555702e+00],
               [ 1.41817821e-03,  7.76623029e-02, -5.72659272e-01],
               [-6.50372495e-01,  5.09981400e-01,  3.33484553e+00],
               [ 1.72491724e-01, -2.83823173e-01, -4.15053202e-02],
               [-1.22199629e-01, -2.61623360e-01, -1.32105334e-01],
               [-1.15833331e-01, -3.25721144e-02,  1.32955539e-01],
               [-5.93305958e-01, -2.29450508e-01, -3.74635752e-01],
               [-1.42438115e-01, -1.05323541e-01,  1.62724450e-02],
               [ 1.12245849e-02,  2.05892895e-01,  1.26545043e-02],
               [ 5.10415613e-03, -8.84921625e-02, -1.85301180e+00]]}

class TestKqeq(unittest.TestCase):
    
    def test_prediction(self):
        targ_count=0
        desdict = {"nmax" : [3,2],
                   "lmax" : [3,2],
                   "rcut" : [2,4],
                   "sigma": [0.2,0.4],
                   "deltas": [0.75,0.25],
                   "periodic": [False,False]}

        atsize = 1.0
        radtype = "qeq"

        SOAP_Kernel = kernel(Kernel='SOAP',
                             Descriptor='SOAP',
                             multi_SOAP=True,
                             descriptor_dict=desdict,
                             training_set=mols_train)


        for kQeq_target in ["charges", "dipole", ["dipole","charges"]]:
            if len(kQeq_target) == 2:
                wt = [1,0.5]
            else:
                wt = 1
            my_kqeq = kernel_qeq(Kernel=SOAP_Kernel,
                                    scale_atsize=atsize,
                                    radius_type=radtype,
                                    sparse = True,
                                    sparse_count = 200)
            my_kqeq.train(targets=kQeq_target,lambda_reg=0.1,target_weights = wt)
            dipoles, charges, enegs = my_kqeq.predict(mols_test)
            self.assertTrue(np.allclose(dipoles, np.array(dipoles_prediction[targ_count]),atol=5e-1))
            self.assertTrue(np.allclose(charges, np.array(charges_prediction[targ_count]),atol=5e-1))
            self.assertTrue(np.allclose(enegs, np.array(eneg_prediction[targ_count]),atol=5e-1))
            print(f"{kQeq_target} target is OK for simple SOAP predictions") 
            result = my_kqeq.calculate(mols_test[0])
            self.assertTrue( np.allclose(result["charges"], np.array(charges_calc[targ_count]),atol=5e-1))
            self.assertTrue( np.allclose(result["energy"], np.array(energy_calc[targ_count]),rtol=5e-1))
            self.assertTrue( np.allclose(result["dipole_vector"], np.array(dipole_calc[targ_count]),atol=5e-1))
            #self.assertTrue( np.allclose(result["forces"], np.array(forces_calc[targ_count]),atol=0.5))
            print(f"{kQeq_target} target is OK for simple SOAP calculations")
            targ_count += 1


        print("If failed, try again. CUR decomposition picking of the representative set is probabilistic only")
            

        
if __name__ == '__main__':
    #runner=HTMLTestRunner(output="test_report")
    #unittest.main(testRunner=runner)
    unittest.main()

