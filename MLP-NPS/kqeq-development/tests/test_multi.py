import unittest
import sys
sys.path.append("..")
from ase.io import read
import numpy as np
from kqeq.kqeq import kernel_qeq
from kqeq.funct import get_dipoles
from kqeq.kernel import kernel
import matplotlib.pyplot as plt
#from HTMLTestRunner import HTMLTestRunner

mols = read("testcase.xyz@:",format='extxyz')
mols_train = mols[:18]
mols_test = mols[18:]

dipoles_prediction =  {
    0: [ 0.30827961,  0.12573739, -0.21184037,  0.076415,    0.39573384, -0.58017122],
    1: [ 0.54475176,  0.04182289, -0.50520763,  0.03854915,  0.41582415, -0.26595856],
    2:[ 0.48120811,  0.09334588, -0.51163939,  0.0649243,   0.60397211, -0.4547392 ]
}
charges_prediction =  {
    0:[-0.40589029,  0.01384977, -0.2468153,   0.03192753, -0.3007672,   0.38680081,
               -0.50176192,  0.13515954,  0.13675138,  0.13329018,  0.11499318,  0.11645743,
               0.10470298, 0.28130191, -0.34132317, -0.06628418, -0.18244435,  0.06149892,
               -0.1723245,   0.3021049,  -0.22413274,  0.16021375,  0.16022008,  0.15886794,
               0.14360334],
    1:[-1.09686145,  0.18967533, -0.229149,  -0.23973583, -0.38914409,  0.79015116,
              -1.02719758,  0.32336771,  0.31913076,  0.32671511,  0.10655381,  0.20624322,
              0.2039006,   0.51635026, -1.4259883,  -0.06078954, -0.45879373,  0.2888472,
              -0.34111845,  0.75130477, -0.38011787,  0.49423195,  0.49423763,  0.47721981,
              0.16096653],
    2:[-0.37812264,  0.03102958, -0.24466384,  0.04882353, -0.30068157,  0.3550353,
               -0.66773387,  0.13998466,  0.12982509,  0.13600599,  0.1260563,   0.11892162,
               0.12190183,  0.38361803, -0.33941241, -0.12943638, -0.26432434,  0.04375031,
               -0.14171904,  0.34849742, -0.25743358,  0.19041305,  0.19041582,  0.19034918,
               0.16889998]
}
eneg_prediction = {
    0: [ 0.02558725,  0.00426623,  0.07353912, -0.00556499,  0.05968641, -0.01594914,
                 0.05182373, -0.06592572, -0.06571944, -0.06398358, -0.09347244, -0.10223906,
                 -0.09671892, -0.15134035,  0.01802263,  0.0534976,   0.07285282,  0.00825955,
                 0.04819026,  0.00553505,  0.06602328, -0.08416495, -0.08416677, -0.08342397,
                 -0.11658626],
    1: [ 0.0529772,  -0.06150562,  0.02881267, -0.01694769,  0.02305018, -0.10582997,
                0.07541077, -0.16760154, -0.15995362, -0.16283079, -0.1554579,  -0.17764069,
                -0.18244776, -0.29979262,  0.14541642,  0.12208306,  0.15028119, -0.01894836,
                0.02899197, -0.07215676,  0.04953806, -0.18905277, -0.18905489, -0.18824909,
                -0.17024343],
    2:[-0.00459554, -0.01882233,  0.0447239,  -0.03751186,  0.04397819, -0.00662114,
               0.07598389, -0.09799461, -0.09008696, -0.08966174, -0.12266319, -0.13308419,
               -0.14019764, -0.21303499,  0.02990848,  0.10364343,  0.13840305,  0.0474892,
               0.06624367,  0.03080681,  0.09642281, -0.08973898, -0.08973502, -0.09231372,
               -0.10381999]
}



charges_calc = {
    0:[-0.40589029,  0.01384977, -0.2468153 ,  0.03192753, -0.3007672 ,
        0.38680081, -0.50176192,  0.13515954,  0.13675138,  0.13329018,
        0.11499318,  0.11645743,  0.10470298,  0.28130191],
    1:[-1.09686145,  0.18967533, -0.229149  , -0.23973583, -0.38914409,
        0.79015116, -1.02719758,  0.32336771,  0.31913076,  0.32671511,
        0.10655381,  0.20624322,  0.2039006 ,  0.51635026],
    2:[-0.37812264,  0.03102958, -0.24466384,  0.04882353, -0.30068157,
        0.3550353 , -0.66773387,  0.13998466,  0.12982509,  0.13600599,
        0.1260563 ,  0.11892162,  0.12190183,  0.38361803],
}
energy_calc = {
    0:-2.4566329328403573,
    1:-8.789424607321255,
    2:-3.3421382195505314
}
dipole_calc = {
    0: [ 0.30827961,  0.12573739, -0.21184037],
    1: [ 0.54475176,  0.04182289, -0.50520763],
    2:[ 0.48120811,  0.09334588, -0.51163939]
}

forces_calc ={
    0:[[-0.02306522,  0.40483752,  0.04597315],
               [ 0.05241428,  0.25395492,  0.49153615],
               [-0.35322424, -0.13429621, -0.71473819],
               [ 0.27334957,  0.00699049, -0.30746384],
               [ 0.731056,   -0.57081706,  0.48915504],
               [-0.47377584,  0.47632918,  0.20110271],
               [ 0.41432568, -0.37683982, -0.00088428],
               [-0.24157231, -0.09512058,  0.00133406],
               [ 0.14832296, -0.09687537,  0.13611587],
               [ 0.10000033, -0.05183479, -0.15407002],
               [-0.02562061, -0.14251454, -0.12653561],
               [-0.18398938, -0.0413423,  0.1234767 ],
               [-0.08960388,  0.1179342,   0.12134654],
               [-0.32861735,  0.24959435, -0.30634828]],

    1:[[ 1.01343991,  8.94410071, -1.47432633],
              [-0.99706617, -1.48612127, -1.34287352],
              [-1.08674609,  0.08037121, -1.13657598],
              [ 1.92811611, -1.03880248, -2.10184111],
              [ 0.65627757, -0.45556687,  1.94668649],
              [ 1.04679286, -0.62918782,  3.50805142],
              [-0.31722414, -0.1449525,   0.85628549],
              [-3.05212763, -1.5932173,   0.38098109],
              [ 1.23283856, -1.92736945,  2.48985921],
              [ 0.84133531, -2.31208913, -2.17465393],
              [-0.37889944,  0.22182442, -0.38215076],
              [-0.24414521,  0.77628439,  0.42267382],
              [-0.85620356, -0.21711187,  0.3976842 ],
              [ 0.21361192, -0.21816217, -1.38980008]],

    2:[[ 0.09521645,  0.70642518, -0.16325765],
               [-0.0121367,   0.74471493,  0.32237972],
               [-0.86978601, -0.07579159, -1.57211746],
               [ 0.50682741, -0.23987367, -0.63471945],
               [ 1.82011569, -1.42655464,  1.43017768],
               [-0.25966278,  0.37706809, -0.34071718],
               [-0.77819191,  0.59643753,  2.98267675],
               [ 0.47824943, -0.25664896, -0.06694336],
               [-0.28065773, -0.19297656, -0.37035893],
               [-0.21949171,  0.07285074,  0.38485032],
               [-0.59868346, -0.1911109,  -0.31605485],
               [-0.12294351, -0.19408602, -0.03703532],
               [ 0.08743896,  0.27984884, -0.02673063],
               [ 0.15370587, -0.20030299, -1.59214964]]}


class TestKqeq(unittest.TestCase):
    
    def test_prediction(self):
        targ_count=0
        desdict = {"nmax" : [3,2],
                   "lmax" : [3,2],
                   "rcut" : [2,4],
                   "sigma": [0.2,0.4],
                   "deltas":[0.75,0.25],
                   "periodic": [False,False]}


        atsize = 1.0
        radtype = "qeq"

        SOAP_Kernel = kernel(Kernel='SOAP',
                             Descriptor='SOAP',
                             multi_SOAP=True,
                             descriptor_dict=desdict,
                             training_set=mols_train)
        for kQeq_target in ["charges", "dipole", ["dipole","charges"]]:
            if len(kQeq_target) == 2:
                wt = [1,0.5]
            else:
                wt = 1
            my_kqeq = kernel_qeq(Kernel=SOAP_Kernel,
                                    scale_atsize=atsize,
                                    radius_type=radtype)
            my_kqeq.train(targets=kQeq_target,lambda_reg=0.1,target_weights = wt)
            dipoles, charges, enegs = my_kqeq.predict(mols_test)
            self.assertTrue(np.allclose(dipoles, np.array(dipoles_prediction[targ_count])))
            self.assertTrue(np.allclose(charges, np.array(charges_prediction[targ_count])))
            self.assertTrue(np.allclose(enegs, np.array(eneg_prediction[targ_count])))
            print(f"{kQeq_target} target is OK for simple SOAP predictions") 
            result = my_kqeq.calculate(mols_test[0])
            self.assertTrue( np.allclose(result["charges"], np.array(charges_calc[targ_count])))
            self.assertTrue( np.allclose(result["energy"], np.array(energy_calc[targ_count])))
            self.assertTrue( np.allclose(result["dipole_vector"], np.array(dipole_calc[targ_count])))
            self.assertTrue( np.allclose(result["forces"], np.array(forces_calc[targ_count])))
            print(f"{kQeq_target} target is OK for simple SOAP calculations")
            targ_count += 1


if __name__ == '__main__':
    #runner=HTMLTestRunner(output="test_report")
    #unittest.main(testRunner=runner)
    unittest.main()

