import unittest
import sys
sys.path.append("..")
from ase.io import read
import numpy as np
from kqeq.kqeq import kernel_qeq
from kqeq.funct import get_dipoles
from kqeq.kernel import kernel
import matplotlib.pyplot as plt
import random
#from HTMLTestRunner import HTMLTestRunner

random.seed(10)
mols = read("testcase.xyz@:",format='extxyz')
mols_train = mols[:18]
mols_test = mols[18:]

dipoles_prediction =  {
    0:[ 0.18946371,  0.46143463, -0.17141703,  0.09831936,  0.64834236, -0.72405783],
    1: [ 0.5061906,   0.13554236, -0.23555123,  0.07083357,  0.45971859, -0.52708066],
    2:[ 0.37165565,  0.2458309,  -0.12606122,  0.07500677,  0.4963746,  -0.55617182]
}
charges_prediction =  {
    0:[-0.38660436,  0.0203695,  -0.26389567,  0.05112628, -0.33737524,  0.36540076,
               -0.45474428,  0.14616052,  0.14688385,  0.1439136,   0.10434932,  0.10383868,
               0.0968374,   0.26373963, -0.29774229, -0.18299202, -0.15703894,  0.16598598,
               -0.31083061,  0.50609928, -0.29959962,  0.15987054,  0.15986982,  0.15850505,
               0.09787282],
    1:[-1.2425794,   0.3347651,  -0.33351109, -0.05477611, -0.34889263,  0.36477534,
              -0.82430939,  0.36379776,  0.36078709,  0.36657225,  0.12939986,  0.17277658,
              0.16896489,  0.54222974, -1.1092905,  -0.10768787, -0.34329624,  0.29821587,
              -0.36520863,  0.61391307, -0.31753827,  0.39904955,  0.39905262,  0.38926826,
              0.14352213],
    2: [-0.45587993,  0.09858155, -0.31394827,  0.11011627, -0.35176757,  0.33283614,
                -0.64812818,  0.15750061,  0.15645187,  0.15850628,  0.12269025,  0.10242687,
                0.09746618,  0.43314794, -0.34533221, -0.27525024, -0.26551717,  0.21187752,
                -0.29119427,  0.57173977, -0.31609352,  0.19444608,  0.19445176,  0.18819335,
                0.13267893]
}
eneg_prediction = {
    0: [ 0.03059677,  0.02625292,  0.10348461,  0.02640185,  0.10070599,  0.01169159,
                 0.06540426, -0.06337221, -0.06326614, -0.06326464, -0.0645936,  -0.06456763,
                 -0.06512323, -0.12236516,  0.03902327,  0.08595834,  0.08975074,  0.02775467,
                 0.09834826,  0.01125929,  0.09740346, -0.06368862, -0.0636893,  -0.06356433,
                 -0.06378554],
    1:[ 0.07023594, -0.04506174,  0.05010408, -0.03451089,  0.0452249,  -0.02314434,
                0.06194059, -0.17400105, -0.17374237, -0.17373844, -0.17700634, -0.17699587,
                -0.1783396,  -0.34465159,  0.09580033,  0.09748081,  0.09713081, -0.04014406,
                0.04048166, -0.05153927,  0.04026968, -0.17487788, -0.17487954, -0.17461325,
                -0.17511496],
    2:[ 0.0241766,   0.00253332,  0.08978469, -0.00344514,  0.08583358,  0.01830987,
                0.0796195,  -0.07718319, -0.07734972, -0.07713488, -0.10367376, -0.09350431,
                -0.09498676, -0.24096706,  0.04999678,  0.12775916,  0.13495798,  0.02306954,
                0.08161814,  0.00733473,  0.09433243, -0.07905499, -0.07906048, -0.07883491,
                -0.101631  ]
}

charges_calc = {
    0:[-0.38686343,  0.02056656, -0.26387959,  0.05100153, -0.33727915,
               0.36523498, -0.45467897,  0.14621404,  0.14693439,  0.14396551,
               0.10431748,  0.10385948,  0.09686099,  0.26374618],
    1: [-1.24262987,  0.33432049, -0.3335017 , -0.05461662, -0.34936591,
               0.36611329, -0.82488992,  0.36379601,  0.36081194,  0.36657928,
               0.12942946,  0.17274419,  0.16892754,  0.5422818 ],
    2:[-0.45628445,  0.09865927, -0.31376211,  0.10935002, -0.35180885,
               0.33360741, -0.64858849,  0.15756994,  0.15652908,  0.15857664,
               0.12265876,  0.1026014 ,  0.09764138,  0.43324998]
}
energy_calc = {
    0: -2.39991795025167,
    1:-8.882012235679356,
    2:-3.9134139577503255
}
dipole_calc = {
    0:[ 0.18944952,  0.46130684, -0.17126026],
    1: [ 0.50622437,  0.13535044, -0.2356218 ],
    2:[ 0.37150569,  0.24550527, -0.12591596]
}
forces_calc ={
    0:[[ 0.03896226,  0.52680362, -0.0024916 ],
               [ 0.13431634,  0.19296218,  0.34168587],
               [-0.23581974, -0.09463751, -0.45388527],
               [ 0.12067764, -0.01991314, -0.18987847],
               [ 0.35938791, -0.27553947,  0.37659435],
               [-0.2698647,   0.24632896, -0.02459865],
               [ 0.30276788, -0.22576221,  0.25851931],
               [ 0.024687,   -0.1621831,   0.00680456],
               [-0.03964983, -0.16805361, -0.04279736],
               [-0.03650084, -0.12791239,  0.08993922],
               [-0.21095966, -0.03795378, -0.02502783],
               [-0.0296704,  -0.21682331, -0.04698868],
               [ 0.14190666,  0.13838887, -0.03199936],
               [-0.3002405,   0.22429487, -0.2558761 ]],

    1:[[ 6.91485767e-01,  5.80673124e+00, -6.77264805e-01],
              [ 2.06597375e-01, -3.30932510e-01, -1.67884775e-01],
              [-1.08521638e+00,  1.80264906e-01, -5.67011660e-01],
              [ 5.66363998e-01, -1.84893080e-01, -4.20818572e-01],
              [ 4.94134013e-01, -4.47346461e-01,  9.78777144e-01],
              [-7.48400968e-01,  1.01222013e+00,  4.30700697e+00],
              [ 3.36080103e+00, -2.99609433e+00, -9.04344827e-01],
              [-6.03013613e+00, -7.75871387e-01,  5.74761701e-01],
              [ 2.99345227e+00, -1.66160483e+00,  5.00955273e+00],
              [ 2.09574673e+00, -2.85107554e+00, -4.83063214e+00],
              [-9.69056372e-03,  2.19536013e-01, -1.48988734e-03],
              [-9.24834589e-02, -6.46192464e-01, -1.63816406e-01],
              [ 4.22459511e-01,  4.64514607e-01, -1.04034719e-01],
              [-2.86511326e+00,  2.21074356e+00, -3.03280074e+00]],

    2:[[-0.10641909, -0.05297154,  0.04482108],
               [ 0.38367031,  0.67895122,  0.16662492],
               [-0.39107746, -0.17604365, -0.79150932],
               [ 0.07686206, -0.02530497, -0.17148401],
               [ 0.78963781, -0.67143538,  0.43178597],
               [-0.42749575,  0.49126756,  1.7253075 ],
               [ 0.37340616, -0.32393323, -0.14082341],
               [ 1.03005972, -0.15216192, -0.07992769],
               [-0.55451175,  0.01919144, -0.87483016],
               [-0.42161077,  0.25108729,  0.96280075],
               [-0.75371375, -0.11012928,  0.05429144],
               [-0.14191352, -0.95072032, -0.23608895],
               [ 0.61762726,  0.70162863, -0.14436784],
               [-0.47452121,  0.32057412, -0.94660028]]
}

class TestKqeq(unittest.TestCase):
    
    def test_prediction(self):
        targ_count=0
        desdict = {"nmax" : 2,
                   "lmax" : 2,
                   "rcut" : 2,
                   "sigma": 0.2,
                   "periodic": False}

        atsize = 1.0
        radtype = "qeq"

        SOAP_Kernel = kernel(Kernel='SOAP',
                             Descriptor='SOAP',
                             multi_SOAP=False,
                             descriptor_dict=desdict,
                             training_set=mols_train)
        for kQeq_target in ["charges", "dipole", ["dipole","charges"]]:
            if len(kQeq_target) == 2:
                wt = [1,0.5]
            else:
                wt = 1
            my_kqeq = kernel_qeq(Kernel=SOAP_Kernel,
                                    scale_atsize=atsize,
                                    radius_type=radtype,
                                    sparse = True,
                                    sparse_count = 200)
            my_kqeq.train(targets=kQeq_target,lambda_reg=0.1,target_weights = wt)
            dipoles, charges, enegs = my_kqeq.predict(mols_test)
            self.assertTrue(np.allclose(dipoles, np.array(dipoles_prediction[targ_count]),atol=5e-1))
            self.assertTrue(np.allclose(charges, np.array(charges_prediction[targ_count]),atol=5e-1))
            self.assertTrue(np.allclose(enegs, np.array(eneg_prediction[targ_count]),atol=5e-1))
            print(f"{kQeq_target} target is OK for simple SOAP predictions") 
            result = my_kqeq.calculate(mols_test[0])
            self.assertTrue( np.allclose(result["charges"], np.array(charges_calc[targ_count]),atol=5e-1))
            self.assertTrue( np.allclose(result["energy"], np.array(energy_calc[targ_count]),rtol=5e-1))
            self.assertTrue( np.allclose(result["dipole_vector"], np.array(dipole_calc[targ_count]),atol=5e-1))
            #self.assertTrue( np.allclose(result["forces"], np.array(forces_calc[targ_count]),atol=0.5))
            print(f"{kQeq_target} target is OK for simple SOAP calculations")
            targ_count += 1
    print("If failed, try again. CUR decomposition picking of the representative set is probabilistic only")
        
if __name__ == '__main__':
    #runner=HTMLTestRunner(output="test_report")
    #unittest.main(testRunner=runner)
    unittest.main()

